name: Azure Static Web Apps CI/CD

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - provision-app
          - deploy-app
          - assign-permissions
          - assign-user
        default: 'deploy-app'
      client_name:
        description: 'Client name (e.g., bxyz, drby, mmyy, zmmr)'
        required: true
        type: string

env:
  CLIENT_NAME: ${{ github.event.inputs.client_name }}

permissions:
  id-token: write
  contents: read

jobs:
  provision_app:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'provision-app'
    runs-on: ubuntu-latest
    name: Provision 03_serverless_dash Application
    environment: ${{ github.event.inputs.client_name }}
    outputs:
      static-web-app-name: ${{ steps.provision.outputs.SWA_NAME }}
      app-registration-id: ${{ steps.provision.outputs.APP_ID }}
      static-web-app-url: ${{ steps.provision.outputs.SWA_URL }}
      deployment-token: ${{ steps.provision.outputs.DEPLOYMENT_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Set env vars from CONFIG
        run: |
          # Parse CONFIG JSON into env vars
          echo "${{ secrets.CONFIG }}" > config.json
          while IFS="=" read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' config.json)

      - name: Azure Login using Federated Credentials
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Required Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Run Application Provisioning
        id: provision
        env:
          CLIENT_NAME: ${{ github.event.inputs.client_name }}
          CONFIG: ${{ secrets.CONFIG }}
        run: |
          chmod +x ./scripts/provision-03_serverless_dash.sh
          ./scripts/provision-03_serverless_dash.sh "$CLIENT_NAME"

  provision_infrastructure:
    if: github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'deploy-app' || github.event.inputs.action == 'assign-permissions')
    runs-on: ubuntu-latest
    name: Provision Azure Infrastructure
    environment: ${{ github.event.inputs.client_name }}
    outputs:
      static-web-app-token: ${{ steps.create-swa.outputs.deployment-token }}
      app-registration-id: ${{ steps.create-app-reg.outputs.client-id }}
    steps:
      - uses: actions/checkout@v4

      - name: Set env vars from CONFIG
        run: |
          # Parse CONFIG JSON into env vars
          echo "${{ secrets.CONFIG }}" > config.json
          while IFS="=" read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' config.json)

      - name: Azure Login using Federated Credentials
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Azure Static Web App
        id: create-swa
        run: |
          CLIENT_NAME="${{ env.CLIENT_NAME }}"
          RESOURCE_GROUP="${{ env.RESOURCE_GROUP }}"
          LOCATION="${{ env.LOCATION }}"
          CUSTOM_DOMAIN="${{ env.CUSTOM_DOMAIN }}"

          SWA_NAME="${CLIENT_NAME}-serverless-dash"

          # Check if Static Web App already exists
          if az staticwebapp show --name "$SWA_NAME" --resource-group "$RESOURCE_GROUP" >/dev/null 2>&1; then
            echo "Static Web App $SWA_NAME already exists"
            DEPLOYMENT_TOKEN=$(az staticwebapp secrets list --name "$SWA_NAME" --resource-group "$RESOURCE_GROUP" --query "properties.apiKey" -o tsv)
          else
            echo "Creating Static Web App: $SWA_NAME"
            az staticwebapp create \
              --name "$SWA_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --source "https://github.com/Tidy-Analytics/03_serverless_dash" \
              --location "$LOCATION" \
              --branch "master" \
              --app-location "_site" \
              --output-location "" \
              --login-with-github

            DEPLOYMENT_TOKEN=$(az staticwebapp secrets list --name "$SWA_NAME" --resource-group "$RESOURCE_GROUP" --query "properties.apiKey" -o tsv)
          fi

          echo "deployment-token=$DEPLOYMENT_TOKEN" >> $GITHUB_OUTPUT

      - name: Create/Update Azure AD App Registration
        id: create-app-reg
        run: |
          CLIENT_NAME="${{ env.CLIENT_NAME }}"
          CUSTOM_DOMAIN="${{ env.CUSTOM_DOMAIN }}"

          APP_NAME="${CLIENT_NAME}-serverless-dash-auth"
          SWA_URL="https://${CLIENT_NAME}-serverless-dash.azurestaticapps.net"

          # Check if app registration exists
          if APP_ID=$(az ad app list --display-name "$APP_NAME" --query "[0].appId" -o tsv) && [ -n "$APP_ID" ]; then
            echo "App registration $APP_NAME already exists with ID: $APP_ID"
          else
            echo "Creating app registration: $APP_NAME"
            APP_ID=$(az ad app create \
              --display-name "$APP_NAME" \
              --web-redirect-uris "$SWA_URL/.auth/login/aad/callback" \
              --query "appId" -o tsv)
            echo "Created app registration with ID: $APP_ID"
          fi

          # Create client secret
          CLIENT_SECRET=$(az ad app credential reset --id "$APP_ID" --query "password" -o tsv)

          # Store secrets in Key Vault
          KEYVAULT_NAME="${{ env.KEYVAULT_NAME }}"
          az keyvault secret set --vault-name "$KEYVAULT_NAME" --name "${CLIENT_NAME}-swa-client-id" --value "$APP_ID"
          az keyvault secret set --vault-name "$KEYVAULT_NAME" --name "${CLIENT_NAME}-swa-client-secret" --value "$CLIENT_SECRET"

          echo "client-id=$APP_ID" >> $GITHUB_OUTPUT
          echo "client-secret=$CLIENT_SECRET" >> $GITHUB_OUTPUT

  build_and_deploy_job:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy-app'
    needs: [provision_infrastructure]
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    environment: ${{ github.event.inputs.client_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          lfs: false

      - name: Set env vars from CONFIG
        run: |
          # Parse CONFIG JSON into env vars
          echo "${{ secrets.CONFIG }}" > config.json
          while IFS="=" read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' config.json)

      - name: Azure Login using Federated Credentials
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: pre-release
          tinytex: true

      - name: Refresh SAS Tokens
        run: |
          CLIENT_NAME="${{ env.CLIENT_NAME }}"
          echo "Refreshing SAS tokens for client: $CLIENT_NAME"

          # Run the SAS token refresh script with 30-day expiry for app deployments
          ./scripts/update-sas-url.sh "$CLIENT_NAME" 30

          echo "SAS tokens refreshed successfully"

      - name: Get Static Web App Details
        run: |
          CLIENT_NAME="${{ env.CLIENT_NAME }}"
          RESOURCE_GROUP="${{ env.RESOURCE_GROUP }}"
          SWA_NAME="${CLIENT_NAME}-serverless-dash"

          # Get deployment token from the existing Static Web App
          DEPLOYMENT_TOKEN=$(az staticwebapp secrets list --name "$SWA_NAME" --resource-group "$RESOURCE_GROUP" --query "properties.apiKey" -o tsv)
          echo "DEPLOYMENT_TOKEN=$DEPLOYMENT_TOKEN" >> $GITHUB_ENV

          # Get app registration ID from Key Vault
          KEYVAULT_NAME="${{ env.KEYVAULT_NAME }}"
          CLIENT_ID=$(az keyvault secret show --vault-name "$KEYVAULT_NAME" --name "${CLIENT_NAME}-swa-client-id" --query "value" -o tsv)
          echo "SWA_CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV

      - name: Update Static Web App Config
        run: |
          CLIENT_ID="${{ env.SWA_CLIENT_ID }}"

          # Update staticwebapp.config.json with client-specific values
          jq --arg client_id "$CLIENT_ID" \
             '.auth.identityProviders.azureActiveDirectory.registration.clientIdSettingName = "AZURE_CLIENT_ID" |
              .auth.identityProviders.azureActiveDirectory.registration.clientSecretSettingName = "AZURE_CLIENT_SECRET"' \
             staticwebapp.config.json > staticwebapp.config.tmp && mv staticwebapp.config.tmp staticwebapp.config.json

      - name: Create Runtime Configuration
        run: |
          CLIENT_NAME="${{ env.CLIENT_NAME }}"
          STORAGE_ACCOUNT_NAME="${{ env.STORAGE_ACCOUNT_NAME }}"
          BLOB_CONTAINER_NAME="${{ env.BLOB_CONTAINER_NAME }}"

          # Get the refreshed SAS token from KeyVault (updated by the refresh script)
          KEYVAULT_NAME="${CLIENT_NAME}-kv"
          STORAGE_SAS_TOKEN=$(az keyvault secret show --vault-name "$KEYVAULT_NAME" --name "storage-sas-token" --query "value" -o tsv)

          # Create runtime config JavaScript file for blob storage access
          cat > _site/runtime-config.js << EOF
          window.runtimeConfig = {
            storageAccountName: '$STORAGE_ACCOUNT_NAME',
            sasToken: '$STORAGE_SAS_TOKEN',
            containerName: '$BLOB_CONTAINER_NAME',
            dataFileName: 'customer_data.json'
          };
          EOF

          echo "Created runtime configuration for blob storage access with refreshed SAS token"

      - name: Render Quarto Project
        run: |
          quarto render

      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.DEPLOYMENT_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "_site"
          output_location: ""
          skip_app_build: true

  assign_permissions_job:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'assign-permissions'
    needs: [provision_infrastructure]
    runs-on: ubuntu-latest
    name: Assign Permissions Job
    environment: ${{ github.event.inputs.client_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set env vars from CONFIG
        run: |
          # Parse CONFIG JSON into env vars
          echo "${{ secrets.CONFIG }}" > config.json
          while IFS="=" read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' config.json)

      - name: Azure Login using Federated Credentials
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Assign Static Web App Permissions
        run: |
          CLIENT_NAME="${{ env.CLIENT_NAME }}"
          RESOURCE_GROUP="${{ env.RESOURCE_GROUP }}"
          SWA_NAME="${CLIENT_NAME}-serverless-dash"
          APP_OWNER="${{ env.APP_OWNER }}"

          # Get Static Web App resource ID
          SWA_ID=$(az staticwebapp show --name "$SWA_NAME" --resource-group "$RESOURCE_GROUP" --query "id" -o tsv)

          # Assign Contributor role to app owner
          az role assignment create \
            --assignee "$APP_OWNER" \
            --role "Static Web App Contributor" \
            --scope "$SWA_ID"

          echo "Assigned Static Web App Contributor role to $APP_OWNER"

      - name: Configure Static Web App Settings
        run: |
          CLIENT_NAME="${{ env.CLIENT_NAME }}"
          RESOURCE_GROUP="${{ env.RESOURCE_GROUP }}"
          SWA_NAME="${CLIENT_NAME}-serverless-dash"
          KEYVAULT_NAME="${{ env.KEYVAULT_NAME }}"

          # Get secrets from Key Vault
          CLIENT_ID=$(az keyvault secret show --vault-name "$KEYVAULT_NAME" --name "${CLIENT_NAME}-swa-client-id" --query "value" -o tsv)
          CLIENT_SECRET=$(az keyvault secret show --vault-name "$KEYVAULT_NAME" --name "${CLIENT_NAME}-swa-client-secret" --query "value" -o tsv)

          # Set application settings
          az staticwebapp appsettings set \
            --name "$SWA_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --setting-names "AZURE_CLIENT_ID=$CLIENT_ID" "AZURE_CLIENT_SECRET=$CLIENT_SECRET"

          echo "Configured application settings for authentication"

  assign_user_job:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'assign-user'
    runs-on: ubuntu-latest
    name: Assign User Job
    environment: ${{ github.event.inputs.client_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set env vars from CONFIG
        run: |
          # Parse CONFIG JSON into env vars
          echo "${{ secrets.CONFIG }}" > config.json
          while IFS="=" read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' config.json)

      - name: Azure Login using Federated Credentials
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Assign User Access to Static Web App
        run: |
          CLIENT_NAME="${{ env.CLIENT_NAME }}"
          RESOURCE_GROUP="${{ env.RESOURCE_GROUP }}"
          SWA_NAME="${CLIENT_NAME}-serverless-dash"
          APP_OWNER="${{ env.APP_OWNER }}"

          # Invite user to the Static Web App
          az staticwebapp users invite \
            --name "$SWA_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --authentication-provider "AAD" \
            --user-details "$APP_OWNER" \
            --roles "authenticated" \
            --invitation-expiration-in-hours 24

          echo "Invited user $APP_OWNER to access the Static Web App"