{"title":"Customer Segment Heatmap Analysis","markdown":{"yaml":{"title":"Customer Segment Heatmap Analysis","format":{"html":{"code-fold":true,"theme":"cosmo","embed-resources":false}}},"containsRefs":false,"markdown":"\n\n```{=html}\n<style>\n/* Import Google Font */\n@import url('https://fonts.googleapis.com/css2?family=Averia+Sans+Libre:wght@300;400;700&display=swap');\n\n/* Apply Averia Sans Libre to all Observable elements */\n.observablehq {\n  font-family: 'Averia Sans Libre', cursive !important;\n}\n\n/* Apply to the entire document */\nbody, h1, h2, h3, h4, h5, h6, p {\n  font-family: 'Averia Sans Libre', cursive !important;\n}\n\n/* Custom styling for the dropdown */\n.observablehq select {\n  font-size: 16px !important;\n  padding: 10px 15px !important;\n  border: 2px solid #e0e0e0 !important;\n  border-radius: 8px !important;\n  background-color: white !important;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;\n  transition: all 0.3s ease !important;\n  min-width: 250px !important;\n  font-family: 'Averia Sans Libre', cursive !important;\n}\n\n.observablehq select:hover {\n  border-color: #4a90e2 !important;\n  box-shadow: 0 4px 12px rgba(74, 144, 226, 0.2) !important;\n}\n\n.observablehq select:focus {\n  outline: none !important;\n  border-color: #4a90e2 !important;\n  box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1) !important;\n}\n\n/* Larger font for labels */\n.observablehq label {\n  font-size: 18px !important;\n  font-weight: 600 !important;\n  color: #333 !important;\n  margin-bottom: 8px !important;\n  display: block !important;\n  font-family: 'Averia Sans Libre', cursive !important;\n}\n\n/* Heatmap container background */\n.observablehq figure {\n  background-color: #f5f2e8 !important;\n  padding: 20px !important;\n  border-radius: 12px !important;\n  margin: 20px 0 !important;\n}\n</style>\n```\n\n```{ojs}\n//| echo: false\n\n// Import libraries\nPlot = import(\"https://cdn.skypack.dev/@observablehq/plot@0.6\")\nd3 = import(\"https://cdn.skypack.dev/d3@7\")\n```\n\n```{ojs}\n//| echo: false\n\n// Load customer data from blob storage or fallback to local data\ncustomerData = await (async () => {\n  // Try to load data from Azure Blob Storage using runtime config\n  const runtimeConfig = window.runtimeConfig || {};\n  const { storageAccountName, sasToken, containerName, dataFileName = 'customer_data.json' } = runtimeConfig;\n\n  if (storageAccountName && sasToken && containerName) {\n    try {\n      const blobUrl = `https://${storageAccountName}.blob.core.windows.net/${containerName}/${dataFileName}?${sasToken}`;\n      const response = await fetch(blobUrl);\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log(`Loaded ${data.length} customer records from blob storage`);\n        return data;\n      }\n    } catch (error) {\n      console.warn('Failed to load from blob storage, using local data:', error);\n    }\n  }\n\n  // Fallback to local data file\n  console.log('Using local customer data file');\n  return FileAttachment(\"customer_data.json\").json();\n})()\n```\n\n```{ojs}\n//| echo: false\n\n// Get unique segments for the dropdown\nsegments = [...new Set(customerData.map(d => d.segment_code))].sort()\n```\n\n```{ojs}\n//| echo: false\n\n// Create the segment selector\nviewof selectedSegment = Inputs.select(segments, {\n  label: \"Select Customer Segment\",\n  value: segments[0]\n})\n```\n\n```{ojs}\n//| echo: false\n\n// Filter data based on selection\nfilteredData = customerData.filter(d => d.segment_code === selectedSegment)\n```\n\n```{ojs}\n//| echo: false\n\n// Calculate cohort averages for heatmap\ncohortAverages = d3.group(filteredData, d => d.customer_tenure_week, d => d.elapsed_week)\n```\n\n```{ojs}\n//| echo: false\n\n// Transform grouped data into heatmap format\nheatmapData = Array.from(cohortAverages, ([tenure_week, elapsedData]) => \n  Array.from(elapsedData, ([elapsed_week, records]) => ({\n    customer_tenure_week: tenure_week,\n    elapsed_week: elapsed_week,\n    avg_amount: d3.mean(records, d => d.amount),\n    count: records.length\n  }))\n).flat()\n```\n\n```{ojs}\n//| echo: false\n\n// Display summary statistics (hidden)\nsegmentSummary = ({\n  totalCustomers: [...new Set(filteredData.map(d => d.customer_id))].length,\n  totalObservations: filteredData.length,\n  avgAmount: d3.mean(filteredData, d => d.amount),\n  tenureWeeksRange: `${d3.min(filteredData, d => d.customer_tenure_week)} - ${d3.max(filteredData, d => d.customer_tenure_week)}`,\n  elapsedWeeksRange: `${d3.min(filteredData, d => d.elapsed_week)} - ${d3.max(filteredData, d => d.elapsed_week)}`\n})\n```\n\n```{ojs}\n//| echo: false\n\n// Create the cohort heatmap visualization\nPlot.plot({\n  title: `${selectedSegment} Segment: Cohort Performance Over Time`,\n  //subtitle: \"Cohorts ordered chronologically (Week 1 = earliest onboarded customers)\",\n  width: 900,\n  height: 500,\n  marginLeft: 100,\n  marginBottom: 60,\n  style: {\n    backgroundColor: \"#f5f2e8\"\n  },\n  x: {\n    label: \"Elapsed Week →\",\n    domain: d3.range(1, 14),\n    tickFormat: d => `W${d}`,\n    padding: 0,\n    range: [0, 900 - 100] // Ensure full width usage\n  },\n  y: {\n    label: \"↑ Customer Tenure Week (Cohort)\",\n    domain: d3.range(1, 11), // Changed from .reverse() to show 1 at top\n    tickFormat: d => `Cohort ${d}`,\n    padding: 0,\n    range: [500 - 60, 0] // Ensure full height usage\n  },\n  color: {\n    type: \"linear\",\n    scheme: \"Blues\",\n    label: \"Average Amount ($)\",\n    legend: true\n  },\n  marks: [\n    Plot.rect(heatmapData, {\n      x: \"elapsed_week\",\n      y: \"customer_tenure_week\",\n      fill: \"avg_amount\",\n      title: d => `Cohort ${d.customer_tenure_week}, Week ${d.elapsed_week}\\nAvg Amount: $${d.avg_amount?.toFixed(2)}\\nObservations: ${d.count}`,\n      stroke: \"none\",\n      inset: 0\n    }),\n    Plot.text(heatmapData, {\n      x: \"elapsed_week\",\n      y: \"customer_tenure_week\",\n      text: d => d.avg_amount ? `$${d.avg_amount.toFixed(0)}` : \"\",\n      fill: \"white\",\n      fontSize: 10,\n      fontWeight: \"bold\"\n    })\n  ]\n})\n```","srcMarkdownNoYaml":"\n\n```{=html}\n<style>\n/* Import Google Font */\n@import url('https://fonts.googleapis.com/css2?family=Averia+Sans+Libre:wght@300;400;700&display=swap');\n\n/* Apply Averia Sans Libre to all Observable elements */\n.observablehq {\n  font-family: 'Averia Sans Libre', cursive !important;\n}\n\n/* Apply to the entire document */\nbody, h1, h2, h3, h4, h5, h6, p {\n  font-family: 'Averia Sans Libre', cursive !important;\n}\n\n/* Custom styling for the dropdown */\n.observablehq select {\n  font-size: 16px !important;\n  padding: 10px 15px !important;\n  border: 2px solid #e0e0e0 !important;\n  border-radius: 8px !important;\n  background-color: white !important;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;\n  transition: all 0.3s ease !important;\n  min-width: 250px !important;\n  font-family: 'Averia Sans Libre', cursive !important;\n}\n\n.observablehq select:hover {\n  border-color: #4a90e2 !important;\n  box-shadow: 0 4px 12px rgba(74, 144, 226, 0.2) !important;\n}\n\n.observablehq select:focus {\n  outline: none !important;\n  border-color: #4a90e2 !important;\n  box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1) !important;\n}\n\n/* Larger font for labels */\n.observablehq label {\n  font-size: 18px !important;\n  font-weight: 600 !important;\n  color: #333 !important;\n  margin-bottom: 8px !important;\n  display: block !important;\n  font-family: 'Averia Sans Libre', cursive !important;\n}\n\n/* Heatmap container background */\n.observablehq figure {\n  background-color: #f5f2e8 !important;\n  padding: 20px !important;\n  border-radius: 12px !important;\n  margin: 20px 0 !important;\n}\n</style>\n```\n\n```{ojs}\n//| echo: false\n\n// Import libraries\nPlot = import(\"https://cdn.skypack.dev/@observablehq/plot@0.6\")\nd3 = import(\"https://cdn.skypack.dev/d3@7\")\n```\n\n```{ojs}\n//| echo: false\n\n// Load customer data from blob storage or fallback to local data\ncustomerData = await (async () => {\n  // Try to load data from Azure Blob Storage using runtime config\n  const runtimeConfig = window.runtimeConfig || {};\n  const { storageAccountName, sasToken, containerName, dataFileName = 'customer_data.json' } = runtimeConfig;\n\n  if (storageAccountName && sasToken && containerName) {\n    try {\n      const blobUrl = `https://${storageAccountName}.blob.core.windows.net/${containerName}/${dataFileName}?${sasToken}`;\n      const response = await fetch(blobUrl);\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log(`Loaded ${data.length} customer records from blob storage`);\n        return data;\n      }\n    } catch (error) {\n      console.warn('Failed to load from blob storage, using local data:', error);\n    }\n  }\n\n  // Fallback to local data file\n  console.log('Using local customer data file');\n  return FileAttachment(\"customer_data.json\").json();\n})()\n```\n\n```{ojs}\n//| echo: false\n\n// Get unique segments for the dropdown\nsegments = [...new Set(customerData.map(d => d.segment_code))].sort()\n```\n\n```{ojs}\n//| echo: false\n\n// Create the segment selector\nviewof selectedSegment = Inputs.select(segments, {\n  label: \"Select Customer Segment\",\n  value: segments[0]\n})\n```\n\n```{ojs}\n//| echo: false\n\n// Filter data based on selection\nfilteredData = customerData.filter(d => d.segment_code === selectedSegment)\n```\n\n```{ojs}\n//| echo: false\n\n// Calculate cohort averages for heatmap\ncohortAverages = d3.group(filteredData, d => d.customer_tenure_week, d => d.elapsed_week)\n```\n\n```{ojs}\n//| echo: false\n\n// Transform grouped data into heatmap format\nheatmapData = Array.from(cohortAverages, ([tenure_week, elapsedData]) => \n  Array.from(elapsedData, ([elapsed_week, records]) => ({\n    customer_tenure_week: tenure_week,\n    elapsed_week: elapsed_week,\n    avg_amount: d3.mean(records, d => d.amount),\n    count: records.length\n  }))\n).flat()\n```\n\n```{ojs}\n//| echo: false\n\n// Display summary statistics (hidden)\nsegmentSummary = ({\n  totalCustomers: [...new Set(filteredData.map(d => d.customer_id))].length,\n  totalObservations: filteredData.length,\n  avgAmount: d3.mean(filteredData, d => d.amount),\n  tenureWeeksRange: `${d3.min(filteredData, d => d.customer_tenure_week)} - ${d3.max(filteredData, d => d.customer_tenure_week)}`,\n  elapsedWeeksRange: `${d3.min(filteredData, d => d.elapsed_week)} - ${d3.max(filteredData, d => d.elapsed_week)}`\n})\n```\n\n```{ojs}\n//| echo: false\n\n// Create the cohort heatmap visualization\nPlot.plot({\n  title: `${selectedSegment} Segment: Cohort Performance Over Time`,\n  //subtitle: \"Cohorts ordered chronologically (Week 1 = earliest onboarded customers)\",\n  width: 900,\n  height: 500,\n  marginLeft: 100,\n  marginBottom: 60,\n  style: {\n    backgroundColor: \"#f5f2e8\"\n  },\n  x: {\n    label: \"Elapsed Week →\",\n    domain: d3.range(1, 14),\n    tickFormat: d => `W${d}`,\n    padding: 0,\n    range: [0, 900 - 100] // Ensure full width usage\n  },\n  y: {\n    label: \"↑ Customer Tenure Week (Cohort)\",\n    domain: d3.range(1, 11), // Changed from .reverse() to show 1 at top\n    tickFormat: d => `Cohort ${d}`,\n    padding: 0,\n    range: [500 - 60, 0] // Ensure full height usage\n  },\n  color: {\n    type: \"linear\",\n    scheme: \"Blues\",\n    label: \"Average Amount ($)\",\n    legend: true\n  },\n  marks: [\n    Plot.rect(heatmapData, {\n      x: \"elapsed_week\",\n      y: \"customer_tenure_week\",\n      fill: \"avg_amount\",\n      title: d => `Cohort ${d.customer_tenure_week}, Week ${d.elapsed_week}\\nAvg Amount: $${d.avg_amount?.toFixed(2)}\\nObservations: ${d.count}`,\n      stroke: \"none\",\n      inset: 0\n    }),\n    Plot.text(heatmapData, {\n      x: \"elapsed_week\",\n      y: \"customer_tenure_week\",\n      text: d => d.avg_amount ? `$${d.avg_amount.toFixed(0)}` : \"\",\n      fill: \"white\",\n      fontSize: 10,\n      fontWeight: \"bold\"\n    })\n  ]\n})\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"embed-resources":false,"output-file":"heatmap.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","resources":["customer_data.json","staticwebapp.config.json"],"theme":"cosmo","title":"Customer Segment Heatmap Analysis"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}